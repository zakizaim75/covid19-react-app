{"version":3,"sources":["CountryPicker.js","CoronaTracker.js","App.js","serviceWorker.js","index.js"],"names":["CountryPicker","props","fetchCountries","axios","get","then","response","setState","countries","data","handleChange","event","value","target","handleCountryChange","state","country","this","FormControl","NativeSelect","onChange","map","c","key","name","Component","CoronaTracker","confirm","confirmed","deaths","recovered","getData","confirmG","deathsG","recoveredG","catch","error","console","log","Fragment","className","start","end","duration","separator","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fb953640.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {NativeSelect,FormControl} from '@material-ui/core';\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nexport default class CountryPicker extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            countries:[],\r\n            country:\"\"\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.fetchCountries()\r\n    }\r\n    fetchCountries=()=>{\r\n        axios.get(\"https://covid19.mathdro.id/api/countries\")\r\n        .then(response=>{\r\n            this.setState({\r\n                countries:response.data.countries\r\n            })\r\n        })\r\n    }\r\n    handleChange=(event)=>{\r\n        var value=event.target.value;\r\n        this.props.handleCountryChange(value);\r\n\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n          <center>\r\n              <FormControl>\r\n                  <NativeSelect onChange={this.handleChange}>\r\n                     <option>Silahkan Pilih Negara yang Diinginkan</option>\r\n                     {\r\n                         this.state.countries.map(c=>(\r\n                         <option key={c.name} value={c.name}>{c.name}</option>\r\n                         ))\r\n                     }             \r\n                      </NativeSelect>   \r\n                  </FormControl>\r\n              </center>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './styles/corona.css';\r\nimport CountUp from 'react-countup';\r\nimport CountryPicker from './CountryPicker'\r\n\r\nexport default class CoronaTracker extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            confirm:null,\r\n            deaths:null,\r\n            recovered:null,\r\n            country:null,\r\n            confirmG:null,\r\n            deathsG:null,\r\n            recoveredG:null,\r\n        }\r\n    }\r\n    handleCountryChange=(country)=>{\r\n        axios.get(\"https://covid19.mathdro.id/api/countries/\" + country)\r\n        .then(response=>{\r\n            this.setState({\r\n                confirm:response.data.confirmed.value,\r\n                deaths:response.data.deaths.value,\r\n                recovered:response.data.recovered.value,\r\n            })\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        this.getData();\r\n    }\r\n    getData=()=>{\r\n        axios.get('https://covid19.mathdro.id/api')\r\n       .then(response=>{\r\n           this.setState({\r\n               confirmG:response.data.confirmed.value,\r\n               deathsG:response.data.deaths.value,\r\n               recoveredG:response.data.recovered.value,\r\n           })\r\n       })\r\n      .catch(error=>{\r\n          console.log(error.response);\r\n          \r\n      })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <React.Fragment> \r\n              <div className=\"corona-body\">\r\n                  <div className=\"container\">\r\n                      <div>\r\n                          <center className=\"judul\">COVID-19 DATA </center>\r\n                          <br/>\r\n                          <div className=\"name\">       \r\n                              <center>GLOBAL</center>\r\n                              </div>\r\n                      </div>\r\n                      <center>\r\n                      <div className=\"card-deck card-decks\"> \r\n                      <div className=\"card confirm box\">\r\n                       <div className=\"card-title c-title\">\r\n                           <center>Kasus Aktif</center>\r\n                \r\n                           </div>\r\n                           <div className=\"card-body c-body text-center\">\r\n                           <div className=\"number\"> \r\n                               {this.state.confirmG}\r\n                               </div>\r\n                               </div>\r\n                   </div>\r\n                   <br/>\r\n                   <div className=\"card recovered box\">\r\n                       <div className=\"card-title c-title\">\r\n                           <center>Sembuh</center>\r\n                \r\n                           </div>\r\n                           <div className=\"card-body c-body text-center\">\r\n                           <div className=\"number\"> \r\n                               {this.state.recoveredG}\r\n                               </div>\r\n                               </div>\r\n                   </div>\r\n                   <br/>\r\n                   <div className=\"card deaths box\">\r\n                       <div className=\"card-title c-title\">\r\n                           <center>Meninggal</center>\r\n                \r\n                           </div>\r\n                           <div className=\"card-body c-body text-center\">\r\n                            <div className=\"number\"> \r\n                            {this.state.deathsG}\r\n                           </div>\r\n                               </div>\r\n                        </div>\r\n                        </div>\r\n                        <br/>\r\n                          </center>\r\n                  </div><br/><br/>\r\n                    <div className=\"name\">\r\n                    <center>NEGARA</center>\r\n                    </div>\r\n                    <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n                  <div className=\"container\">                  \r\n                  <div className=\"card-deck card-decks\">\r\n                   <div className=\"card confirm box\">\r\n                       <div className=\"card-title c-title\">\r\n                           <center>Kasus Aktif</center>\r\n                           </div>\r\n                           <div className=\"card-body c-body text-center\">\r\n                               <CountUp\r\n                               start={0}\r\n                               end={this.state.confirm}\r\n                               duration={1}\r\n                               separator=\",\"\r\n                               className=\"number\"/>\r\n                               </div>\r\n                   </div>\r\n                   <div className=\"card recovered box\">\r\n                       <div className=\"card-title c-title\">\r\n                           <center>Sembuh</center>\r\n                \r\n                           </div>\r\n                           <div className=\"card-body c-body text-center\">\r\n                               <CountUp\r\n                               start={0}\r\n                               end={this.state.recovered}\r\n                               duration={1}\r\n                               separator=\",\"\r\n                               className=\"number\"/>\r\n                               </div>\r\n                   </div>\r\n                   <div className=\"card deaths box\">\r\n                       <div className=\"card-title c-title\">\r\n                           <center>Meninggal</center>\r\n                           </div>\r\n                           <div className=\"card-body c-body text-center\">\r\n                               <CountUp\r\n                               start={0}\r\n                               end={this.state.deaths}\r\n                               duration={1}\r\n                               separator=\",\"\r\n                               className=\"number\"/>\r\n                               </div>\r\n                        </div>\r\n                        </div><br/>\r\n\r\n                   </div>\r\n                  </div>\r\n              </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport CoronaTracker from'./CoronaTracker';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CoronaTracker />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}